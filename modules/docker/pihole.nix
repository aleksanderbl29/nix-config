# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "aleksanderbl/pihole-unbound:2025.04.0";
    environment = {
      "FTLCONF_dns_dnssec" = "true";
      "FTLCONF_dns_listeningMode" = "single";
      "FTLCONF_dns_upstreams" = "127.0.0.1#5335";
      "FTLCONF_webserver_api_password" = "password";
      "FTLCONF_webserver_interface_theme" = "default-auto";
      "TZ" = "Europe/Copenhagen";
    };
    volumes = [
      "/Users/aleksander/nix-config/modules/docker/compose/03-custom.conf:/etc/dnsmasq.d/03-custom.conf:rw"
      "/Users/aleksander/nix-config/modules/docker/compose/adlists.list:/etc/pihole/adlists.list:rw"
    ];
    ports = [
      "53:53/tcp"
      "53:53/udp"
      "809:80/tcp"
    ];
    labels = {
      "com.centurylinklabs.watchtower.monitor-only" = "true";
      "traefik.docker.network" = "proxy";
      "traefik.enable" = "true";
      "traefik.http.middlewares.pihole1-admin.addprefix.prefix" = "/admin";
      "traefik.http.middlewares.pihole1-https-redirect.redirectscheme.scheme" = "https";
      "traefik.http.routers.pihol1.entrypoints" = "http";
      "traefik.http.routers.pihole1-secure.entrypoints" = "https";
      "traefik.http.routers.pihole1-secure.middlewares" = "pihole1-admin";
      "traefik.http.routers.pihole1-secure.rule" = "Host(`pihole1.local.aleksanderbl.dk`)";
      "traefik.http.routers.pihole1-secure.service" = "pihole1";
      "traefik.http.routers.pihole1-secure.tls" = "true";
      "traefik.http.routers.pihole1.middlewares" = "pihole1-https-redirect";
      "traefik.http.routers.pihole1.rule" = "Host(`pihole1.local.aleksanderbl.dk`)";
      "traefik.http.services.pihole1.loadbalancer.server.port" = "80";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=pihole"
      "--network=proxy"
    ];
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-pihole-root.target"
    ];
    wantedBy = [
      "docker-compose-pihole-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
