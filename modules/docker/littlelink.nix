# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."littlelink-server" = {
    image = "ghcr.io/techno-tim/littlelink-server:latest";
    environment = {
      "AVATAR_2X_URL" = "https://pbs.twimg.com/profile_images/1661137669156487168/VcAtkav1_400x400.jpg";
      "AVATAR_ALT" = "Aleksander's profile pic";
      "AVATAR_URL" = "https://pbs.twimg.com/profile_images/1661137669156487168/VcAtkav1_400x400.jpg";
      "BIO" = "Hey! Find mig disse steder!";
      "BLUESKY" = "https://bsky.app/profile/aleksanderbl.dk";
      "BUTTON_ORDER" = "TWITTER,BLUESKY,GITHUB,INSTAGRAM,LINKED_IN,CV,EMAIL";
      "CUSTOM_BUTTON_ALT_TEXT" = "My CV,Min R-pakke";
      "CUSTOM_BUTTON_COLOR" = "#000000,#2568BD";
      "CUSTOM_BUTTON_ICON" = "fas file-alt,fas box";
      "CUSTOM_BUTTON_NAME" = "CV,R-pakke";
      "CUSTOM_BUTTON_TEXT" = "CV";
      "CUSTOM_BUTTON_TEXT_COLOR" = "#ffffff,#ffffff";
      "CUSTOM_BUTTON_URL" = "https://cv.aleksanderbl.dk,https://package.aleksanderbl.dk";
      "EMAIL" = "kontakt@aleksanderbl.dk";
      "EMAIL_TEXT" = "Send mig en mail!";
      "FAVICON_URL" = "https://pbs.twimg.com/profile_images/1661137669156487168/VcAtkav1_400x400.jpg";
      "FOOTER" = "Aleksander Bang-Larsen © 2024";
      "GITHUB" = "https://github.com/aleksanderbl29";
      "LINKED_IN" = "https://www.linkedin.com/in/aleksander-bang-larsen-405b03a4/";
      "META_AUTHOR" = "Aleksander Bang-Larsen";
      "META_DESCRIPTION" = "Aleksanders små links";
      "META_TITLE" = "Aleksander's links";
      "NAME" = "Aleksander's links";
      "SKIP_HEALTH_CHECK_LOGS" = "true";
      "THEME" = "Dark";
      "TWITTER" = "https://twitter.com/bang_aleksander";
    };
    ports = [
      "8089:3000/tcp"
    ];
    labels = {
      "com.centurylinklabs.watchtower.monitor-only" = "false";
      "traefik.docker.network" = "proxy";
      "traefik.enable" = "true";
      "traefik.http.middlewares.littlelink-https-redirect.redirectscheme.scheme" = "https";
      "traefik.http.routers.littlelink-secure.entrypoints" = "https";
      "traefik.http.routers.littlelink-secure.rule" = "Host(`links.local.aleksanderbl.dk`)";
      "traefik.http.routers.littlelink-secure.service" = "littlelink";
      "traefik.http.routers.littlelink-secure.tls" = "true";
      "traefik.http.routers.littlelink.entrypoints" = "http";
      "traefik.http.routers.littlelink.middlewares" = "littlelink-https-redirect";
      "traefik.http.routers.littlelink.rule" = "Host(`links.local.aleksanderbl.dk`)";
      "traefik.http.services.littlelink.loadbalancer.server.port" = "3000";
    };
    log-driver = "journald";
    extraOptions = [
      "--hostname=littlelink-server"
      "--network-alias=little-link"
      "--network=external"
      "--network=proxy"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."docker-littlelink-server" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-littlelink-root.target"
    ];
    wantedBy = [
      "docker-compose-littlelink-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-littlelink-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
