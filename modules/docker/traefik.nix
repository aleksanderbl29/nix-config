# Auto-generated using compose2nix v0.3.2-pre.
{ lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."traefik" = {
    image = "traefik:v3.3.4";
    environment = {
      "api.insecure" = "true";
    };
    environmentFiles = [
      "/etc/nixos/modules/docker/compose/traefik/.env"
    ];
    volumes = [
      "/etc/localtime:/etc/localtime:ro"
      "/etc/nixos/modules/docker/compose/traefik/acme.json:/acme.json:rw"
      "/etc/nixos/modules/docker/compose/traefik/config.yml:/config.yml:ro"
      "/etc/nixos/modules/docker/compose/traefik/traefik.yml:/traefik.yml:ro"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "80:80/tcp"
      "443:443/tcp"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto" = "https";
      "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme" = "https";
      "traefik.http.routers.traefik-secure.entrypoints" = "https";
      "traefik.http.routers.traefik-secure.rule" = "Host(`traefik-dashboard.local.aleksanderbl.dk`)";
      "traefik.http.routers.traefik-secure.service" = "api@internal";
      "traefik.http.routers.traefik-secure.tls" = "true";
      "traefik.http.routers.traefik-secure.tls.certresolver" = "cloudflare";
      "traefik.http.routers.traefik-secure.tls.domains[0].main" = "local.aleksanderbl.dk";
      "traefik.http.routers.traefik-secure.tls.domains[0].sans" = "*.local.aleksanderbl.dk";
      "traefik.http.routers.traefik.entrypoints" = "http";
      "traefik.http.routers.traefik.middlewares" = "traefik-https-redirect";
      "traefik.http.routers.traefik.rule" = "Host(`traefik-dashboard.local.aleksanderbl.dk`)";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=traefik"
      "--network=proxy"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."docker-traefik" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    preStart = ''
      touch /etc/nixos/modules/docker/compose/traefik/acme.json
      chmod 600 /etc/nixos/modules/docker/compose/traefik/acme.json
    '';
    partOf = [
      "docker-compose-traefik-root.target"
    ];
    wantedBy = [
      "docker-compose-traefik-root.target"
    ];
    after = [ "docker-networks.service" ];
    requires = [ "docker-networks.service" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-traefik-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
